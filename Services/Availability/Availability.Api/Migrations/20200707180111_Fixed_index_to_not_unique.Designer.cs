// <auto-generated />
using System;
using Availability.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Availability.Api.Migrations
{
    [DbContext(typeof(AvailabilityContext))]
    [Migration("20200707180111_Fixed_index_to_not_unique")]
    partial class Fixed_index_to_not_unique
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Availability.Domain.AggregateModels.AvailabilityRecordAggregate.AvailabilityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ResponseTime")
                        .HasColumnName("response_time")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusCode")
                        .HasColumnName("status_code")
                        .HasColumnType("integer");

                    b.Property<Guid>("availability_record_id")
                        .HasColumnName("availability_record_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_availability_logs_id");

                    b.HasIndex("availability_record_id");

                    b.ToTable("availability_logs","availability");
                });

            modelBuilder.Entity("Availability.Domain.AggregateModels.AvailabilityRecordAggregate.AvailabilityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpectedResponse")
                        .HasColumnName("expected_response")
                        .HasColumnType("text");

                    b.Property<int>("ExpectedStatusCode")
                        .HasColumnName("expected_status_code")
                        .HasColumnType("integer");

                    b.Property<int>("LogLifetimeThresholdInHours")
                        .HasColumnName("log_lifetime_threshold_in_hours")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_availability_records_id");

                    b.HasIndex("AccountId")
                        .HasName("ix_availiability_recrods_account_id");

                    b.ToTable("availability_records","availability");
                });

            modelBuilder.Entity("Availability.Domain.AggregateModels.AvailabilityRecordAggregate.AvailabilityLog", b =>
                {
                    b.HasOne("Availability.Domain.AggregateModels.AvailabilityRecordAggregate.AvailabilityRecord", null)
                        .WithMany("AvailabilityLogs")
                        .HasForeignKey("availability_record_id")
                        .HasConstraintName("fk_availability_records_availability_logs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
